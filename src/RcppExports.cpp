// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pFeature
NumericVector pFeature(NumericMatrix x, double min_p);
RcppExport SEXP _perich_pFeature(SEXP xSEXP, SEXP min_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type min_p(min_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pFeature(x, min_p));
    return rcpp_result_gen;
END_RCPP
}
// pSample
NumericVector pSample(NumericMatrix x, double min_p);
RcppExport SEXP _perich_pSample(SEXP xSEXP, SEXP min_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type min_p(min_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pSample(x, min_p));
    return rcpp_result_gen;
END_RCPP
}
// testVector
NumericMatrix testVector(NumericVector x, IntegerVector f, Nullable<NumericMatrix> background, Nullable<NumericVector> weights, String alternative, int n_iter, double laplace, String ci_type, double ci_level);
RcppExport SEXP _perich_testVector(SEXP xSEXP, SEXP fSEXP, SEXP backgroundSEXP, SEXP weightsSEXP, SEXP alternativeSEXP, SEXP n_iterSEXP, SEXP laplaceSEXP, SEXP ci_typeSEXP, SEXP ci_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< String >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type laplace(laplaceSEXP);
    Rcpp::traits::input_parameter< String >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< double >::type ci_level(ci_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(testVector(x, f, background, weights, alternative, n_iter, laplace, ci_type, ci_level));
    return rcpp_result_gen;
END_RCPP
}
// testMatrix
List testMatrix(NumericMatrix x, IntegerVector f, Nullable<NumericMatrix> background, Nullable<NumericVector> weights, String alternative, int n_iter, double laplace, String ci_type, double ci_level);
RcppExport SEXP _perich_testMatrix(SEXP xSEXP, SEXP fSEXP, SEXP backgroundSEXP, SEXP weightsSEXP, SEXP alternativeSEXP, SEXP n_iterSEXP, SEXP laplaceSEXP, SEXP ci_typeSEXP, SEXP ci_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< String >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type laplace(laplaceSEXP);
    Rcpp::traits::input_parameter< String >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< double >::type ci_level(ci_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(testMatrix(x, f, background, weights, alternative, n_iter, laplace, ci_type, ci_level));
    return rcpp_result_gen;
END_RCPP
}
// Quantile
NumericVector Quantile(NumericVector x, NumericVector probs);
RcppExport SEXP _perich_Quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// perCI
NumericVector perCI(NumericVector theta, double conf_level);
RcppExport SEXP _perich_perCI(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(perCI(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// BCA
NumericVector BCA(NumericVector theta, double conf_level);
RcppExport SEXP _perich_BCA(SEXP thetaSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(BCA(theta, conf_level));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_perich_pFeature", (DL_FUNC) &_perich_pFeature, 2},
    {"_perich_pSample", (DL_FUNC) &_perich_pSample, 2},
    {"_perich_testVector", (DL_FUNC) &_perich_testVector, 9},
    {"_perich_testMatrix", (DL_FUNC) &_perich_testMatrix, 9},
    {"_perich_Quantile", (DL_FUNC) &_perich_Quantile, 2},
    {"_perich_perCI", (DL_FUNC) &_perich_perCI, 2},
    {"_perich_BCA", (DL_FUNC) &_perich_BCA, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_perich(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
